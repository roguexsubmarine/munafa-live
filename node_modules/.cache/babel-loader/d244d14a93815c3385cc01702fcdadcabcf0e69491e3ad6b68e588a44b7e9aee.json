{"ast":null,"code":"import{useState,useEffect}from'react';const Timer=()=>{const[remainingTime,setRemainingTime]=useState('');useEffect(()=>{// Set the target date to 3:30 PM on October 6th\nconst targetDate=new Date('2024-10-06T16:0  0:00');const updateTimer=()=>{const currentDate=new Date();const difference=targetDate-currentDate;// Time difference in milliseconds\nif(difference>0){// Convert milliseconds into HH:MM:SS format\nconst hours=Math.floor(difference/(1000*60*60));const minutes=Math.floor(difference%(1000*60*60)/(1000*60));const seconds=Math.floor(difference%(1000*60)/1000);const timeString=`${String(hours).padStart(2,'0')}:${String(minutes).padStart(2,'0')}:${String(seconds).padStart(2,'0')}`;setRemainingTime(timeString);// Update the state with the formatted string\n}else{setRemainingTime('00:00:00');// If the countdown has finished\n}};// Initial call to set the timer\nupdateTimer();// Update every second\nconst interval=setInterval(updateTimer,1000);// Cleanup interval on component unmount\nreturn()=>clearInterval(interval);},[]);return remainingTime;// Render the remaining time\n};export default Timer;","map":{"version":3,"names":["useState","useEffect","Timer","remainingTime","setRemainingTime","targetDate","Date","updateTimer","currentDate","difference","hours","Math","floor","minutes","seconds","timeString","String","padStart","interval","setInterval","clearInterval"],"sources":["/home/submarine/psf/munafa-live/src/components/timer.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst Timer = () => {\n  const [remainingTime, setRemainingTime] = useState('');\n\n  useEffect(() => {\n    // Set the target date to 3:30 PM on October 6th\n    const targetDate = new Date('2024-10-06T16:0  0:00');\n\n    const updateTimer = () => {\n      const currentDate = new Date();\n      const difference = targetDate - currentDate; // Time difference in milliseconds\n\n      if (difference > 0) {\n        // Convert milliseconds into HH:MM:SS format\n        const hours = Math.floor(difference / (1000 * 60 * 60));\n        const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n\n        const timeString = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n\n        setRemainingTime(timeString);  // Update the state with the formatted string\n      } else {\n        setRemainingTime('00:00:00'); // If the countdown has finished\n      }\n    };\n\n    // Initial call to set the timer\n    updateTimer();\n\n    // Update every second\n    const interval = setInterval(updateTimer, 1000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  return remainingTime // Render the remaining time\n};\n\nexport default Timer;\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,KAAM,CAAAC,KAAK,CAAGA,CAAA,GAAM,CAClB,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGJ,QAAQ,CAAC,EAAE,CAAC,CAEtDC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAI,UAAU,CAAG,GAAI,CAAAC,IAAI,CAAC,uBAAuB,CAAC,CAEpD,KAAM,CAAAC,WAAW,CAAGA,CAAA,GAAM,CACxB,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAAF,IAAI,CAAC,CAAC,CAC9B,KAAM,CAAAG,UAAU,CAAGJ,UAAU,CAAGG,WAAW,CAAE;AAE7C,GAAIC,UAAU,CAAG,CAAC,CAAE,CAClB;AACA,KAAM,CAAAC,KAAK,CAAGC,IAAI,CAACC,KAAK,CAACH,UAAU,EAAI,IAAI,CAAG,EAAE,CAAG,EAAE,CAAC,CAAC,CACvD,KAAM,CAAAI,OAAO,CAAGF,IAAI,CAACC,KAAK,CAAEH,UAAU,EAAI,IAAI,CAAG,EAAE,CAAG,EAAE,CAAC,EAAK,IAAI,CAAG,EAAE,CAAC,CAAC,CACzE,KAAM,CAAAK,OAAO,CAAGH,IAAI,CAACC,KAAK,CAAEH,UAAU,EAAI,IAAI,CAAG,EAAE,CAAC,CAAI,IAAI,CAAC,CAE7D,KAAM,CAAAM,UAAU,CAAG,GAAGC,MAAM,CAACN,KAAK,CAAC,CAACO,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,IAAID,MAAM,CAACH,OAAO,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,IAAID,MAAM,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EAAE,CAE9Hb,gBAAgB,CAACW,UAAU,CAAC,CAAG;AACjC,CAAC,IAAM,CACLX,gBAAgB,CAAC,UAAU,CAAC,CAAE;AAChC,CACF,CAAC,CAED;AACAG,WAAW,CAAC,CAAC,CAEb;AACA,KAAM,CAAAW,QAAQ,CAAGC,WAAW,CAACZ,WAAW,CAAE,IAAI,CAAC,CAE/C;AACA,MAAO,IAAMa,aAAa,CAACF,QAAQ,CAAC,CACtC,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAf,aAAa,CAAC;AACvB,CAAC,CAED,cAAe,CAAAD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}